package com.hunau.InterfaceTest;

/**
 * @Systemname:Java学习练习
 * @Author:谢俊伟
 * @Description:
 * @Data:Created in 2021/3/15 21:20
 * @Unitname:湖南农业大学信科学院物联网工程系
 * @Copyright:谢俊伟 201841882121
 */

/**
 * 抽象类：
 * 	1、什么是抽象类？
 * 	    抽象类是类和类之间有共同特征，将这些有共同特征的类再进一步抽象就构成了抽象类，因为类本身是不存在的，所以抽象类无法创建对象。
 * 		        抽象类和抽象类实际上可能还有共同特征，还可以再抽象。
 * 	2、抽象类属于什么类型？
 * 		抽象类也属于引用数据类型。
 * 	3、抽象类怎么定义？
 * 		语法：
 * 			【修饰符列表】 abstract class 类名 {  类 体  }
 * 	4、抽象类书无法实例化的，无法创建对象，所以抽象类是用来被子类继承的
 * 	5、final和abstract不能联合使用，这两个关键字是对立的
 * 	6、子类继承抽象类，子类可以实例化对象
 * 	7、抽象类的子类可以是非抽象类，也可以是抽象类
 * 	8、抽象类虽无法实例化，但抽象类有构造方法，是供子类使用的
 * 	9、抽象方法：表示没有实现的方法，没有方法体的方法。
 * 		public abstract void doSome();
 * 		特点：没有方法体，以分号结尾。
 * 			  前面修饰符列表中有abstract关键字
 * 	10、抽象类中不一定有抽象方法。
 * 	        但抽象方法必须在抽象类中。
 * 	11、重要结论：一个非抽象的类，继承一个抽象类，必须将抽象类中的抽象方法实现了（覆盖/重写）。
 * 	    （由Java语法强行规定，不然编译报错。）
 * 	    但是如果子类也是抽象类，那么继承过来的抽象方法也可以不重写/覆盖/实现。
 * 		====>>>>抽象类中不一定有抽象方法，但抽象方法必须在抽象类中。
 * 	12、面向抽象编程而不要一直面向具体编程，降低程序的耦合度，提高程序的扩展能力。
 */

/**
 * 接口：
 * 	一、接口的基础语法
 * 		1、接口也是一种引用数据类型，编译之后也是一个class字节码文件。
 * 		2、接口是完全抽象的。（上面的抽象类是半抽象），或者说接口是特殊的抽象类。
 * 		3、接口怎么定义：
 *                        {修饰符列表} interface 接口名{ … }
 * 		4、接口支持多继承，一个接口可以继承多个接口。
 * 		5、接口中只能有：
 * 			①常量
 * 			②抽象方法
 * 		6、接口中所有的元素都是公开的，都用public修饰。
 * 		7、既然接口中都是抽象方法，那么编写代码时，public abstract修饰符可以省略。
 * 		8、接口中的方法都是抽象方法，所以接口中的方法不能有方法体。
 * 		9、接口中的常量的 public static final关键字可以省略。
 * 		10、实现一个接口：
 * 			//特殊的抽象类，完全抽象的，叫做接口
 * 			interface MyMath{
 * 				double PI = 3.1415 ;
 * 				int num(int a,int b);
 * 				int sum(int a,int b);
 *            }
 * 			//编写一个类（这个类是一个“非抽象”的类）
 * 			//这个类的名字是随意的
 * 			abstract class MyMathImpl implements MyMath{
 * 				//重写/覆盖/实现 接口中的方法 （通常叫实现）
 * 				public int sum(int a,int b){
 * 					return a+b;
 *                }
 * 				public int num(int a,int b){
 * 					return a-b;
 *                }
 *            }
 * 		11、当一个非抽象的类实现接口的话，必须将接口中所有的抽象方法全部实现（覆盖、重写）
 * 		12、接口和接口之间可以多继承；
 * 		    类和接口之间可以多实现==>
 * 			   一个类可实现多个接口，这种机制弥补了Java中 类和类只支持单继承的缺陷
 * 		13、extends和implements可以共存，extends在前，implements在后。
 * 		14、使用接口写代码的时候，可以使用多态（父类型引用指向子类型对象）
 * 	二、接口在开发中的作用
 * 		1、类似于多态在开发中的作用。
 * 		   多态：面向抽象编程，不要面向具体编程。降低程序的耦合度，提高扩展力。
 * 		2、面向抽象编程这句话以后可以修改为：面向接口编程。
 * 		    ====>相当于：有了接口就有了插拔，可插拔表示为扩展力很强，并非焊死的。
 *
 * 	接口可以将调用者和实现者解耦合。
 *
 */
public class Readme {
}
